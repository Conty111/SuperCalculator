// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	models "github.com/Conty111/SuperCalculator/back-end/models"
	mock "github.com/stretchr/testify/mock"
)

// UserManager is an autogenerated mock type for the UserManager type
type UserManager struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *UserManager) CreateUser(user *models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: user
func (_m *UserManager) DeleteUser(user *models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields: callerID
func (_m *UserManager) GetAllUsers(callerID uint) ([]*models.User, error) {
	ret := _m.Called(callerID)

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func(uint) []*models.User); ok {
		r0 = rf(callerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(callerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastID provides a mock function with given fields:
func (_m *UserManager) GetLastID() (uint, error) {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: userEmail
func (_m *UserManager) GetUserByEmail(userEmail string) (*models.User, error) {
	ret := _m.Called(userEmail)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(userEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: userID
func (_m *UserManager) GetUserByID(userID uint) (*models.User, error) {
	ret := _m.Called(userID)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(uint) *models.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: user, param, value
func (_m *UserManager) UpdateUser(user *models.User, param string, value interface{}) error {
	ret := _m.Called(user, param, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User, string, interface{}) error); ok {
		r0 = rf(user, param, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserEmailExists provides a mock function with given fields: userEmail
func (_m *UserManager) UserEmailExists(userEmail string) (bool, error) {
	ret := _m.Called(userEmail)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userEmail)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserExists provides a mock function with given fields: userID
func (_m *UserManager) UserExists(userID uint) (bool, error) {
	ret := _m.Called(userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserManager creates a new instance of UserManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserManager(t mockConstructorTestingTNewUserManager) *UserManager {
	mock := &UserManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
