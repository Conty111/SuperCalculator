// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: back-end/proto/agent.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentGRPCClient is the client API for AgentGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentGRPCClient interface {
	GetInfo(ctx context.Context, in *AgentInfoRequest, opts ...grpc.CallOption) (*AgentInfoResponse, error)
	SetSettings(ctx context.Context, in *SetAgentSettingsRequest, opts ...grpc.CallOption) (*SetAgentSettingsResponse, error)
}

type agentGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentGRPCClient(cc grpc.ClientConnInterface) AgentGRPCClient {
	return &agentGRPCClient{cc}
}

func (c *agentGRPCClient) GetInfo(ctx context.Context, in *AgentInfoRequest, opts ...grpc.CallOption) (*AgentInfoResponse, error) {
	out := new(AgentInfoResponse)
	err := c.cc.Invoke(ctx, "/agents_managment.AgentGRPC/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentGRPCClient) SetSettings(ctx context.Context, in *SetAgentSettingsRequest, opts ...grpc.CallOption) (*SetAgentSettingsResponse, error) {
	out := new(SetAgentSettingsResponse)
	err := c.cc.Invoke(ctx, "/agents_managment.AgentGRPC/SetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentGRPCServer is the server API for AgentGRPC service.
// All implementations must embed UnimplementedAgentGRPCServer
// for forward compatibility
type AgentGRPCServer interface {
	GetInfo(context.Context, *AgentInfoRequest) (*AgentInfoResponse, error)
	SetSettings(context.Context, *SetAgentSettingsRequest) (*SetAgentSettingsResponse, error)
	mustEmbedUnimplementedAgentGRPCServer()
}

// UnimplementedAgentGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedAgentGRPCServer struct {
}

func (UnimplementedAgentGRPCServer) GetInfo(context.Context, *AgentInfoRequest) (*AgentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedAgentGRPCServer) SetSettings(context.Context, *SetAgentSettingsRequest) (*SetAgentSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSettings not implemented")
}
func (UnimplementedAgentGRPCServer) mustEmbedUnimplementedAgentGRPCServer() {}

// UnsafeAgentGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentGRPCServer will
// result in compilation errors.
type UnsafeAgentGRPCServer interface {
	mustEmbedUnimplementedAgentGRPCServer()
}

func RegisterAgentGRPCServer(s grpc.ServiceRegistrar, srv AgentGRPCServer) {
	s.RegisterService(&AgentGRPC_ServiceDesc, srv)
}

func _AgentGRPC_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentGRPCServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents_managment.AgentGRPC/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentGRPCServer).GetInfo(ctx, req.(*AgentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentGRPC_SetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAgentSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentGRPCServer).SetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agents_managment.AgentGRPC/SetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentGRPCServer).SetSettings(ctx, req.(*SetAgentSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentGRPC_ServiceDesc is the grpc.ServiceDesc for AgentGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agents_managment.AgentGRPC",
	HandlerType: (*AgentGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _AgentGRPC_GetInfo_Handler,
		},
		{
			MethodName: "SetSettings",
			Handler:    _AgentGRPC_SetSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "back-end/proto/agent.proto",
}
